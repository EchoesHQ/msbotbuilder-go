/*
 * Microsoft Bot Connector API - v3.0
 *
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft
 *
 * API version: v3
 * Contact: botframework@microsoft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package botbuilder

import (
	"net/http"
)


// AttachmentsApiRouter defines the required methods for binding the api requests to a responses for the AttachmentsApi
// The AttachmentsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a AttachmentsApiServicer to perform the required actions, then write the service results to the http response.
type AttachmentsApiRouter interface { 
	AttachmentsGetAttachment(http.ResponseWriter, *http.Request)
	AttachmentsGetAttachmentInfo(http.ResponseWriter, *http.Request)
}
// ConversationsApiRouter defines the required methods for binding the api requests to a responses for the ConversationsApi
// The ConversationsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ConversationsApiServicer to perform the required actions, then write the service results to the http response.
type ConversationsApiRouter interface { 
	ConversationsCreateConversation(http.ResponseWriter, *http.Request)
	ConversationsDeleteActivity(http.ResponseWriter, *http.Request)
	ConversationsDeleteConversationMember(http.ResponseWriter, *http.Request)
	ConversationsGetActivityMembers(http.ResponseWriter, *http.Request)
	ConversationsGetConversationMembers(http.ResponseWriter, *http.Request)
	ConversationsGetConversationPagedMembers(http.ResponseWriter, *http.Request)
	ConversationsGetConversations(http.ResponseWriter, *http.Request)
	ConversationsReplyToActivity(http.ResponseWriter, *http.Request)
	ConversationsSendConversationHistory(http.ResponseWriter, *http.Request)
	ConversationsSendToConversation(http.ResponseWriter, *http.Request)
	ConversationsUpdateActivity(http.ResponseWriter, *http.Request)
	ConversationsUploadAttachment(http.ResponseWriter, *http.Request)
}


// AttachmentsApiServicer defines the api actions for the AttachmentsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type AttachmentsApiServicer interface { 
	AttachmentsGetAttachment(string, string) (interface{}, error)
	AttachmentsGetAttachmentInfo(string) (interface{}, error)
}


// ConversationsApiServicer defines the api actions for the ConversationsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ConversationsApiServicer interface { 
	ConversationsCreateConversation(ConversationParameters) (interface{}, error)
	ConversationsDeleteActivity(string, string) (interface{}, error)
	ConversationsDeleteConversationMember(string, string) (interface{}, error)
	ConversationsGetActivityMembers(string, string) (interface{}, error)
	ConversationsGetConversationMembers(string) (interface{}, error)
	ConversationsGetConversationPagedMembers(string, int32, string) (interface{}, error)
	ConversationsGetConversations(string) (interface{}, error)
	ConversationsReplyToActivity(string, string, Activity) (interface{}, error)
	ConversationsSendConversationHistory(string, Transcript) (interface{}, error)
	ConversationsSendToConversation(string, Activity) (interface{}, error)
	ConversationsUpdateActivity(string, string, Activity) (interface{}, error)
	ConversationsUploadAttachment(string, AttachmentData) (interface{}, error)
}
